@page "/pt"
@page "/prodtype"
@using BlazeAc.Data
@inject ProductTypeService typeService
@inject ProductCategService categService
@inject MudBlazor.ISnackbar snackBar

<h3>pc</h3>

<h3>ProdCateg</h3>
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Product Types</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>

        <MudAutocomplete Value="categ" ValueChanged="@((ProductCateg emp) => SelectedPcChanged(emp))" Dense="true" T="ProductCateg" SearchFunc="SearchProdCateg" ToStringFunc="@(e=> e==null?null : $"{e.ProdCateg + " -" + e.ProdCategId.ToString()}")" />
        <MudTextField @ref="idRef" @bind-Value="tbl.ProdCategId" Label="Categ Id" Variant="Variant.Text"
                      Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="tbl.ProdTypeId" Label="Type Id" Variant="Variant.Text" Margin="Margin.Normal">
        </MudTextField>
        <MudTextField @bind-Value="tbl.ProdType" Label="Type Name" Variant="Variant.Text" Margin="Margin.Normal">
        </MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Customer</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Dense="true" Elevation="0" Items="Get()" Filter="new Func<ProductType, bool>(Search)" @bind-tbl="tbl">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Customers</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search..." Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Prod Categ Id</MudTh>
        <MudTh>Prod Type Id</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Prod Categ">@context.ProdCategId</MudTd>
        <MudTd DataLabel="Prod Categ">@context.ProdTypeId</MudTd>
        <MudTd DataLabel="Prod Categ">@context.ProdType</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.ProdTypeId))" Color="Color.Primary"
                    Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.ProdTypeId))" Color="Color.Secondary"
                    Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private MudTextField<byte> idRef;
    private string searchString = "";
    private ProductType tbl = new ProductType();
    private List<ProductType> lists = new List<ProductType>();
    private List<ProductCateg> categs = new List<ProductCateg>();
    private ProductCateg categ;

    protected override async Task OnInitializedAsync()
    {
        Get();
    }

    private void SelectedPcChanged(ProductCateg productCateg)
    {
        tbl.ProdCategId = productCateg.ProdCategId;
        tbl.ProdTypeId = typeService.GetMaxType(productCateg.ProdCategId);

    }

    public async Task Save()
    {
        typeService.Save(tbl);
        tbl = new ProductType();
        snackBar.Add("Product Type Added", Severity.Success);
        await idRef.FocusAsync();
    }

    public async Task Edit(int id)
    {
        tbl = lists.FirstOrDefault(c => c.ProdTypeId == id);
        categ = new ProductCateg();
        categ.ProdCategId = tbl.ProdCategId;
        categ.ProdCateg = categs.Where(x => x.ProdCategId == categ.ProdCategId).FirstOrDefault().ProdCateg;

        snackBar.Add("Ready To Update.", Severity.Normal);
        Get();
        await idRef.FocusAsync();
    }

    public void Delete(int id)
    {
        typeService.Delete(id);
        snackBar.Add("Product Type Deleted.", Severity.Warning);
        Get();
    }

    protected List<ProductType> Get()
    {
        categs = categService.Get();
        lists = typeService.Get();
        return lists;
    }

    private bool Search(ProductType tbl)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (tbl.ProdType.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        || tbl.ProdTypeId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
        || tbl.ProdCategId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private async Task<IEnumerable<ProductCateg>> SearchProdCateg(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return categs;
        return categs.Where(x => x.ProdCateg.Contains(value, StringComparison.InvariantCultureIgnoreCase));

    }
}
