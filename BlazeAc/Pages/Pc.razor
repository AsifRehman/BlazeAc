@page "/pc"
@using BlazeAc.Data
@inject ProductCategService prodService
@inject WeatherForecastService w
@inject MudBlazor.ISnackbar snackBar

<h3>pc</h3>

<h3>ProdCateg</h3>
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Product Categories</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @ref="idRef" @bind-Value="tbl.ProdCategId" Label="Category Id" Variant="Variant.Text"
            Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="tbl.ProdCateg" Label="Category Name" Variant="Variant.Text" Margin="Margin.Normal">
        </MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Customer</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="0" Items="Get()" Filter="new Func<ProductCateg, bool>(Search)" @bind-tbl="tbl">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Customers</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search..." Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Prod Categ Id</MudTh>
        <MudTh>Prod Category</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.ProdCategId</MudTd>
        <MudTd DataLabel="Prod Categ">@context.ProdCateg</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.ProdCategId))" Color="Color.Primary"
                Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.ProdCategId))" Color="Color.Secondary"
                Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private MudTextField<byte> idRef;
    private string searchString = "";
    private ProductCateg tbl = new ProductCateg();
    private WeatherForecast ww = new WeatherForecast();
    private List<ProductCateg> lists = new List<ProductCateg>();

    protected override async Task OnInitializedAsync()
    {
        Get();
    }

    public async Task Save()
    {
        prodService.Save(tbl);
        tbl = new ProductCateg();
        snackBar.Add("Product Category Added", Severity.Success);
        await idRef.FocusAsync();
    }
    public async Task Edit(int id)
    {
        tbl = lists.FirstOrDefault(c => c.ProdCategId == id);
        snackBar.Add("Ready To Update.", Severity.Normal);
        Get();
        await idRef.FocusAsync();
    }
    public void Delete(short id)
    {
        prodService.Delete(id);
        snackBar.Add("Product Category Deleted.", Severity.Warning);
        Get();
    }
    protected List<ProductCateg> Get()
    {
        lists = prodService.Get();
        return lists;
    }

    private bool Search(ProductCateg tbl)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (tbl.ProdCateg.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        || tbl.ProdCateg.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
}
